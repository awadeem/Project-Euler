import java.util.ArrayList;
import java.util.List;

public class EularProblems {
    //Problem3
    public static boolean isPrime(long number) {
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
    public static void main(String[] args) {


        //Problem 1
    /*If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
    */

        List<Integer> multiOfThree = new ArrayList<>();
        List<Integer> multiOfFive = new ArrayList<>();

        int sumOfThree = 0;
        int sumOfFive = 0;

        for (int i = 0; i < 1000; i++) {
            if (i % 3 == 0) {
                multiOfThree.add(i);
                sumOfThree += i;
            } else if (i % 5 == 0) {
                multiOfFive.add(i);
                sumOfFive += i;
            }

        }
        int total = sumOfThree + sumOfFive;
        System.out.println("sum of all the multiples of 3 or 5 below 1000: " + total);

        //Problem 2

        /*Each new term in the Fibonacci sequence is generated by adding the previous two terms.
        By starting with 1 and 2, the first 10 terms will be:
        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        By considering the terms in the Fibonacci sequence whose values do not exceed four million,
        find the sum of the even-valued terms.
        */
        int sum =0;
        int a = 0;
        int b = 1;
        int c = a + b;
        while (c<4000000){
            if(c%2==0){
                sum = sum + c;
            }
            a = b;
            b = c;
            c = a+b;
        }
        System.out.println("Fibonacci sequence: "+ sum);

        //Problem 3

        /*The prime factors of 13195 are 5, 7, 13 and 29.
          What is the largest prime factor of the number 600851475143 ?
       */
        long number = 600851475143L;

        long largestFactor = 1;
        long num = 1;
        while (num * num < number) {
            if (number % num == 0 && num > largestFactor) {
                if (isPrime(num)) {
                    largestFactor = num;
                }
            }
            num++;
        }
        System.out.println("LargestFactory: "+largestFactor);

    }
}
